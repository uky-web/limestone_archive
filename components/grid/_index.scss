@use 'root-rhythm';
@use 'color-functions';
@use 'color-schemes';

.grid {
  @include root-rhythm.rr-slab-wrapper($margins: true);

  .grid__column {
    margin-bottom: 2rem;

    &:last-child {
      margin-bottom: 0;
    }
  }


  //nested grids
  .grid {
    max-width: none;
    margin: root-rhythm.rr-gridbase(1) 0;

    &.grid--2-up {
      display: block;
    }
  }

  @include root-rhythm.rr-break-directive(m) {
    .grid__column {
      margin-bottom: 0;
    }

    .grid {
      margin: root-rhythm.rr-gridbase(2) 0;  

      .grid__column {
        margin-bottom: 2rem;
      }
    }
  }

  @include root-rhythm.rr-break-directive(l) {
    .grid {
      margin: root-rhythm.rr-gridbase(4) 0;

      .grid__column {
        margin-bottom: 0;
      }

      &.grid--2-up {
        display: grid;
      }      
    }
  }
}

// The divided style separates blocks with a vertical border between
// the elements. This exists in the gap space between grid items, though,
// so we need to do a little finagling. 

.grid--divided {
  .grid__column {
    position: relative; // The border is drawn with a pseudoelement so we can move it around.

    // The mobile-first treatment is to have the border at the bottom.
    &::after {
      position: absolute;
      right: 0;
      bottom: -1px;
      left: 0;
      height: 2px;
      background-color: color-functions.color(subtle-gray);
      content: '';
    }
  }

  // The last child does not need a border because duh
  .grid__column:last-child::after {
    display: none;
  }
}

.grid--two-tone {
  .grid__column {
    margin: root-rhythm.rr-gridbase(1);
    padding: root-rhythm.rr-gridbase(3);
    background-color: color-functions.color(wildcat-blue);
    @include usescheme(color-schemes.$scheme-dark);
  }
}

// This is where things get tricky -- managing border position for all defined grid layouts
// where 1 col has borders on the bottom, > 1 col has a border on the right except for the
// last child in a list AND the last children in a row
// 
// And also we need to be aware of grid-gap configuration changes based on the baseline grid 
// config. 

@each $name, $template in root-rhythm.$rr-grids {
  .grid--#{$name} {

    @include root-rhythm.rr-break-directive(m) {
      @include root-rhythm.css-grid-columns($template, $class-prefix: '.grid');
    }

    &.grid--divided {
      $breaks: root-rhythm.rr-breakpoint-list();
      $moved-borders: false;
      $last-columns: null;
      $last-grid-gap: null;

      @each $break in $breaks {
        $num-columns: root-rhythm.rr-columns-for-template($template, $break);
        $grid-gap: root-rhythm.rr-strict-prop-for-breakpoint($break, gutter);

        @include root-rhythm.rr-break-directive($break) {
          .grid__column::after {
            // Border position (bottom or right side) depend on the first breakpoint where columns are defined
            // and we are loading those from a config hash where we can't be certain which breakpoint will be used
            // or even what that breakpoint will be called.
            @if $num-columns and not($moved-borders) {
              top: 0;
              bottom: 0;
              left: auto;
              width: 3px;
              height: auto;
              $moved-borders: true;
              $last-columns: $num-columns;
            }

            // If the grid gap has changed, we need to adjust that too
            // Assuming the borders moved.
            @if $moved-borders and $grid-gap and ($last-grid-gap != $grid-gap) {
              right: calc(-#{$grid-gap}/2 - 1px);
              $last-grid-gap: $grid-gap;
            }
          }

          @if ($num-columns) {
            // If we are changing the number of columns in 
            @if ($last-columns) and ($last-columns != $num-columns) {
              .grid__column:nth-child(#{$last-columns}n)::after {
                display: block;
              }
            }

            .grid__column:nth-child(#{$num-columns}n)::after {
              display: none;
            }
            $last-columns: $num-columns;
          }
        }
      }
    }
  }
}

.grid--major-left {
  .grid__column--minor {
    margin-top: root-rhythm.rr-gridbase(4);
  }
}

.grid--major-right {
  .grid__column--major {
    margin-top: root-rhythm.rr-gridbase(4);
  }
}

@include root-rhythm.rr-break-directive(m) {
  .grid--major-left,
  .grid--major-right {
    .grid__column--major,
    .grid__column--minor {
      margin-top: 0;
    }

    .editorial .editorial__aside.align-right,
    .editorial .editorial__aside.align-left {
      max-width: 100%;
      margin: 1rem 0;
      float: none;
    }
  }

  .grid--major-left {

    .editorial .editorial__aside.align-left {
      margin-left: -2vw;
    }
  }

  .grid--major-right {
    .editorial .editorial__aside.align-right {
      margin-right: -2vw;
    }
  }
}

@include root-rhythm.rr-break-directive(l) {
  .grid--major-left,
  .grid--major-right {
    .editorial .editorial__aside.align-right,
    .editorial .editorial__aside.align-left {
      max-width: 50%;
      margin-top: 0;
    }
  }

  .grid--major-left {
    .editorial .editorial__aside.align-left {
      margin-right: root-rhythm.rr-gridbase(4);
      margin-left: -2vw;
      float: left;
    }

    .editorial .editorial__aside.align-right {
      margin-left: root-rhythm.rr-gridbase(4);
      float: right;
    }
  }

  .grid--major-right {
    .editorial .editorial__aside.align-right {
      margin-right: -2vw;
      margin-left: root-rhythm.rr-gridbase(4);
      float: right;
    }

    .editorial .editorial__aside.align-left {
      margin-right: root-rhythm.rr-gridbase(4);
      float: left;
    }
  }
}

.grid__column--major {
  display: block;
  grid-area: major;
}

.grid__column--minor {
  display: block;
  grid-area: minor;

  >* {
    margin-bottom: root-rhythm.rr-gridbase(4);
  }
}

.grid__column--article {
  grid-area: main;
}

.grid__column--sidebar {
  grid-area: side;
}
